package com.xms.basic.day08;
/**
 *  开发的原则：
 * 		高内聚：一个类单独完成某件事的能力
 * 		低耦合：类与类之间的关系
 * 
 * 
 * 创建猫类，狗类，鸟类
 * 			--成员变量
 * 			--成员方法
 * 生活中继承：	
 * 			继承江山---江山不是自己打，也能做
 * 			继承财产---钱不是自己挣，也能花
 * 			程序中---代码不用自己写，也能用
 * 		
 * 继承：将多个类的公共的成员变量（属性）或者是方法抽出放在一起形成一个新的
 * 				事物（类），这个事物取一个类名，并且将这个称之为父类，被抽出的类
 * 				称之为子类，用一个关键字--extends来表示这两个类之间的关系
 * 
 * 			继承让类与类之间产生关系（强耦合）,默认的父类的范围大于子类
 * 			用关键字--extends表示类与类之间的关系
 * 
 * 继承的好处:
 * 			1.提高代码复用性和可维护性
 * 			2.让类与类之间产生子父类关系---多态的前提
 * 
 * 	继承的特点：
 * 			1.java中的继承，子类只能继承父类中的非私有的成员变量和方法
 * 			2.java中的继承，只支持单继承，不支持多继承，一个父类可以有多个子类
 * 				（一个子女只能有一个亲生父亲，一个父亲可以有多个亲生的子女）
 * 			3.java支持多层继承----继承具有传递性
 * 				如果想要了解整个继承体系所有的属性和方法---最底层的类
 * 				如果想要了解整个继承体系公共的属性和方法---最顶层的类
 * 			4.子类不能继承父类中的构造方法
 * 				--调用或者访问（初始化父类中数据），通过super关键字
 * 				--在子类构造方法第一句，默认调用父类中的参数的构造方法
 * 			5.实际开发中谨慎使用继承
 * 
 *		注意： 
 * 			继承中如果子类和父类中有相同名字的成员变量：
 * 			--就近原则：使用这个对象是什么类型的，就调用那个类中的成员变量
 *			继承中如果子类和父类中有不同名字的成员变量：继承
 *
 *   this和super的区别：
 *   	this:指代当前对象的引用
 *   	super:指代父类的引用
 *   	区别：
 *   			1.调用成员变量：
 *   						this.成员变量名：调用本类中的成员变量
 *   												    也可以调用父类中的成员变量（非私有）
 *   						super.成员变量名：只能调用父类中的成员变量（非私有）
 *   
 *   			2.调用构造方法：
 *   						this(.....):调用本类中的构造构造方法
 *   						super(...):调用父类中的构造方法	
 *   						注意：在同一个构造方法中不能同时出现this和super
 *   								调用构造方法（super重复---编译报错）			
 *   
 *				3.调用成员方法：
 *							this.方法名()：可以调用本类中的成员方法
 *													也可以调用父类中的成员方法（非私有）
 *							super.方法名()：只能调用父类中的成员方法（非私有）
 *
 *		为什么子类的构造方法中第一句会默认调用父类中构造方法：
 *		--因为子类在继承父类，可能会用到父类中的数据，此时在创建
 *			子类对象时，需要先将父类中的数据初始化；
 * 			
 * 		所有的手动创建的类型的顶级父类都为Object类型---写或者不写都有
 * 			Object----JDK自带的类
 * 
 * 
 * @author Administrator
 *
 */
public class Animal{
	//成员变量
    String name;//名字
	int age;//年龄
	char sex;//雌雄
	String project;//品种
	
	//构造方法
	public Animal() {
		super();
		
	}
	public Animal(String name,int age) {
		this.name=name;
		this.age=age;
	}
	public Animal(String name,int age,char sex) {
		this.name=name;
		this.age=age;
		this.sex=sex;
		System.out.println("Animal");
	}
	
	
	//成员方法
	private void eat() {
		System.out.println("进食");
	}
	
	public void work() {
		System.out.println("生活");
	}
	 void work1() {
		System.out.println("生活1");
	}
	 
	//静态方法 
	 public static void add() {
		 System.out.println("father--add");
	 }
	
	

}







