回顾：
	数组：相同数据类型的元素组成集合
	数据结构:按照线性顺序的数据结构
	前驱元素：第一个元素没有前驱元素
	后继元素：最后一个元素没有后继元素
	数组中中用数组的下标表示（0开始到-1结束）
	
	定义注意：
		1.确切的数据类型---表明这个数据能存储什么类型的数据（自动转换除外）
		2.确切的变量名---数组的名字
		3.数组的标识"[]"	----数组的标识
		
		int[] arr=new int[10];
		---[]中时整数类型（数组的长度，元素的个数，空间的大小）
		---不能定义的同时初始化
		---有对应数据类型元素的默认值
		---整数类型：0
		---浮点类型：0.0
		---字符类型：\u0000
		---布尔类型：false
		int[] arr1=new int[]{2,3,4};---可以在定义的同时初始化
		int[] arr2={1,2,3,45};---可以在定义的同时初始化
		
		注意：
				数组一旦一定，就不可更改（数据类型，数组的长度）
				写法  int[] arr或者int arr[]均可以
				不能使用int[] arr;  arr={};其他两种均可以
					
					
		数组的常见的操作:
			1.获取数据的长度（元素个数，空间大小）：数组名.length   (整数类型的数组长度)			
			2.获取数组中某个下标的元素值
						index:数组的下标    [0,数组名.length-1]
						语法：数组名[index]
			3.给数组指定的下标修改/赋值
						index:数组的下标    [0,数组名.length-1]
						语法：数组名[index]=值
			4.数组的遍历：一般搭配for循环遍历数组
			
			
			注意：使用数组下标操作数组元素时，需要注意下标的范围
						不要超出元素的 下标值，否则会报错---数组下标越界
						
		数组的方法：
				1.数组的复制 System.arraycopy(src,srcIndex,dest,destIndex,length)				
				2.数组的复制 类型[] arr=Arrarys.copyof(src,newLength)
										对源 数组本身进行数组的复制
										---当目标数组（源数组）长度大于源数组：“扩容”
										---当目标数组（源数组）长度小于源数组：“缩容”
										原理:只是表面现象，实际上在内存中创建了一个新的数组
												只是恰好数组名相同	
												
				3.Arrarys.sort(类型[] arr):将制定数组进行升序排序
				
				
		冒泡排序：升序排序
					   采用："上浮"和"下沉"
					   措施：
					   			第一次两两元素进行比较，找出最大值放在最后一位，报纸不变
					   			第二次在剩余元素，找出最大值放在倒数第二上，保持不变
					   			....
					   			....
					   			以此类推
					   找出元素中最大值：
					   		for(int i=0;i<arr.lenght-1;i++){
					   		  if(arr[i]>arr[i+1]){
					   		  		int temp=arr[i];
					   		  		arr[i]=arr[i+1];
					   		  		arr[i+1]=temp;
					   		  	}
					   		}
					   	需要找出该数组中几个最大值
					   		for(int j=0;j<arr.length-1;i++){
					   		//找出元素最大值
					   		}
					   		
					   整合：冒泡排序		
					   		for(int j=0;j<arr.length-1;i++){
					   			//找出元素最大值
					   			for(int i=0;i<arr.lenght-1-j;i++){
					   		 		 if(arr[i]>arr[i+1]){
					   		  				int temp=arr[i];
					   		  				arr[i]=arr[i+1];
					   		  				arr[i+1]=temp;
					   		  		}
					   			}
					   		}
今天：
方法：					   		
					   		
					   											
						
							
























