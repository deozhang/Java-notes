我们先看一下题目:

Given an array of integers, return indices of the two numbers such that
they add up to a specific target.
You may assume that each input would have exactly one solution, 
and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].







[题目]给定一个整数数组，返回两个数字的索引，使它们相加到特定目标。
您可以假设每个输入只有一个解决方案，并且您可能不会两次使用相同的元素。

例：
给定nums = [2,7,11,15]，target = 9，
因为nums [ 0 ] + nums [ 1 ] = 2 + 7 = 9，
返回[ 0，1 ]。










题目读完后,你心理想到解法了吗?(1 minutes)













这是我对于算法的一道入门题,我第一次看到这一题的时候感觉题目很短,思路也很清晰,
不就是给了一个目标值,让我在数组里找到两个元素相加之后等于目标值就可以了吗?
这还不简单?
搞一个双重for循环遍历一下不就求出来了吗!
说搞就搞,palapala...
几分钟就搞定了,运行之后一切正常,长舒一口气,
just so so,算法不过如此.

然而,对比晚上的答案后我才发现,是我想的太简单了...
Approach 2: Two-pass Hash Table
To improve our run time complexity, we need a more efficient way to 
check if the complement exists in the array. If the complement exists, 
we need to look up its index. What is the best way to maintain a mapping
 of each element in the array to its index? A hash table.

We reduce the look up time from O(n)O(n) to O(1)O(1) by trading space 
for speed. A hash table is built exactly for this purpose, it supports 
fast look up in near constant time. I say "near" because if a collision
 occurred, a look up could degenerate to O(n)O(n) time. But look up in 
 hash table should be amortized O(1)O(1) time as long as the hash function
  was chosen carefully.

A simple implementation uses two iterations. In the first iteration, 
we add each element's value and its index to the table. Then, in the 
second iteration we check if each element's complement
 (target - nums[i]target−nums[i]) exists in the table. 
 Beware that the complement must not be nums[i]nums[i] itself!


读完也没有太多的思考就开始敲代码,但是解完后我发现对比网上的解答我才发现
原来题目竟然还可以有这种解法.真的是特别的感慨,原来我脑海中产生的解法在别人眼里
被称为暴力法( Brute Force)





