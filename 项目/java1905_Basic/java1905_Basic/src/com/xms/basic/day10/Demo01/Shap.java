package com.xms.basic.day10.Demo01;
/**
 * 图形类
 * 
 * 
 * 抽象类：类中方法没有办法确定实际的业务，这个时候无法确定方法体，且
 * java不建议空的方法体，就可以不写方法体，此时需要使用一个关键字abstract
 * 来表示该方法，即该方法为抽象方法，方法不全，导致类不全，也需要abstract
 * 来修饰该类，即该类为抽象类
 * abstract：抽象的
 * abstract：
 * 		修饰类--抽象类
 * 		修饰方法--抽象方法
 * 		注意：abstract不能修饰变量
 * 
 * 注意事项：
 * 		1.有抽象方法的类，一定为抽象类；抽象类中不一定有抽象方法 
 * 				--抽象类可以成员变量，普通方法，构造方法...
 * 		2.抽象类不能实例化：方法不全---类不全--不完整的类，不能创建对象
 * 		3.抽象类需要被继承
 * 					1.子类可以是抽象类--没有意义	
 * 					2.子类是普通类，子类去继承抽象类，需要重写父类中所有的抽象方法
		4.abstract和final不能同时修饰一个类/方法---两个关键字功能冲突
 * 		5.子类继承抽象方法，必须实现父类中所有的抽象方法，不同的子类，可以
 * 					有不同的实现方式
 * 
 * 	抽象类的意义:
 * 			1.封装子类公共的数据，为子类提供公共数据类型
 * 			2.定义抽象方法，由子类做不同的实现，但是方法的入口一致（方法名相同）
 * 
 * 注意：
 *    和普通类：
 *    		1.抽象类不能实例化
 *    		2.抽象类可以有抽象方法
 *    		其他的和普通类用法一致
 *    
 *    
 * @author Administrator
 *
 */
//抽象类--不能实例化
public abstract  class Shap {
	int a;
	static int b;
	
	public Shap() {
		
	}
	public Shap(int a) {
		this.a=a;
	}
	
	
	public void add() {
		System.out.println("add");
	}
	//抽象方法--无方法体
	public abstract  void area() ;
//	public abstract void area1() ;

}








