上周：
java基础：
变量：声明（语法），使用，命名 ，
数据类型：八种基本数据类型
类型转换：1.自动类型转换    2.强制类型转换（语法）
运算符和表达式：算术运算，比较运算，逻辑运算符，赋值拓展，条件运算（三目运算--语法表达式的含义）

分支：
if:
if-else:
if-else if:
根据判断条件执行相应的逻辑运算
每个判别式都是布尔类型

switch-case:
根据switch判断相等的入口，执行入口中的逻辑
通常搭配break使用

循环：
while:
先判断再执行，根据while中的表达式的结果，判断是否执行循环体
do-while:
先执行再判断，根据while中的表达式的结果，判断是否执行循环体，但是至少执行一次
for:


表达式1：循环的初始条件
表达式2:循环的判断条件（判断条件是唯一的）
表达式3：循环条件的变化量

搭配continue(只搭配循环),break

数组：相同数据类型组成的 


数组的性质：长度，数组下标，前驱元素，后继元素，线性顺序

数组的定义：特殊的写法  int[] arr和int  arr[]
数组的初始化：

数组的遍历（for），取值，获取数组元素个数的语法

数组的方法：复制（arraycopy,copyof）

冒泡排序，两两数据进行对比，采用上浮和下层的方式，让数据进行升序排序

sort（数组名）：使数组进行升序的排序


方法：封装某些具有特定功能的逻辑代码块

方法的定义：五要素：修饰词，返回类型  方法名 ,参数列表，方法体

根据实际的业务要求，确定是否需要返回值，参数列表，何种修饰词

return:在具有返回值类型的方法中，作为返回的一个标识，谁调用方法，即将数据
返回给谁
      如果在没有返回值类型的方法中，表示方法结束，等同于break的作用



方法的调用：通过    类型名.方法名    方式调用方法，在调用方法时根据方法的定义，从
外部输入特定值的方法参数（类型，个数与方法定义的要统一）


今天：

面向对象



面向过程：一堆方法反复调用 
main(){
say:
add():
}

面向对象：以对象为核心，围绕对象做操作

面向接口编程:在面向对象的基础之上，抽接口，复用性好，可维护性强，拓展，一致好...



面向过程：实在
面向对象：抽象

a,b,c更加合理化的使用，位置，大小--抽象

生活中先有对象，再有类


程序当中是先有类，再有对象

现在学习的主要内容，是语法的掌握

类和对象：
 a.现实生活中由很多对象组成
 b.现实世界是先有对象，后有类（根据对象的属性，抽出类）
 c.代码是先有类，再有对象（先创建类，再创建对象）
 d.一个类可以创建多个对象，结构相同，数据不同
 e.类是一种抽象的数据结构
	包含：
	1.对象所共有的特征：
		属性--成员变量
	2.对象共有的方法
		行为--方法
		方法：用于描述对象的行为，封装对象的功能
		（方法是操作数据的）
数组是一种数据结构--引用类型数据
数组分为：基本类型数组，引用类型数组

基本类型数组：八种基本数据类型创建的数组叫做基本类型数组--引用变量
int[] arr=new int[];
引用类型数组：除了八种基本数据类型之外创建的数组都叫做引用类型的数组--引用变量
String[] ss=new String[];




1.定义一个人类，包括属性：姓名，年龄，性别，国籍；包括方法：吃饭，睡觉，工作
建立测试类，调用对应成员变量和方法

2.建立一个叫做Cat类
属性：姓名，毛色，年龄
行为：显示名字，喊叫

要求：创建一个对象猫，姓名叫做"妮妮"，毛色为"灰色"，年龄为2岁，在屏幕上输出
该对象的毛色和年龄，让该对象调用显示名字和喊叫两个方法

3.打印一个L在屏幕上

一个图形有四个小方块组成
类型：小方块类型，L类型(数组),Z类型（数组）---每个图形占据的位置不同（坐标不同）
java中的坐标是以左上顶点为原点
每个图形都有左移，右移，下移的方法



--------------
------口------
------口------
------口口----
--------------
--------------
--------------
--------------
--------------

分析：
步骤：
1.找对象---四个小格子，L图形
2.抽类--class  Cell    ，class L
3.设计类
	1.类的成员变量  
	2.对象的方法


根据你上班的方式，定义不同的上班方法

然后通过方法重载改写这些方法

并且调用对应的方法，观察对比




二维数组：
  
	
	






















































